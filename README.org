#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+title: My emacs configuration
#+date: <2020-06-11 Чт>
#+author: Ivan Oreshnikov
#+email: oreshnikov.ivan@gmail.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 27.0.91 (Org mode 9.3)

* About

  Hi!

  My name is
  #+begin_src emacs-lisp
  (setq user-full-name "Ivan Oreshnikov"
        user-mail-address "oreshnikov.ivan@gmail.com")
  #+end_src
  I have been using emacs for the past 10 years and this is my first attempt at writing a literate config.

* Bootstrapping

*** Setting up melpa and quelpa

    This configuration heavily relies on ~melpa~ repository.
    #+begin_src emacs-lisp
    (require 'package)

    (add-to-list
      'package-archives
      '("melpa" . "https://melpa.org/packages/"))
    (package-initialize)

    (when (not package-archive-contents)
      (package-refresh-contents))
    #+end_src
    ~quelpa~ is necessary only to set up ~all-the-icons~ package, but it's a good idea to keep all the package setup in this section.
    #+begin_src emacs-lisp
    (when (not (package-installed-p 'quelpa))
      (package-install 'quelpa))

    (require 'quelpa)
    (quelpa '(quelpa-use-package :fetcher github :repo "quelpa/quelpa-use-package"))

    (require 'quelpa-use-package)
    #+end_src

* General settings

*** Whitespace

    Automatically delete all the traling whitespace when saving the file. This is a neat feature that I think everyone should set up in their editor, but unfortunately very few people do :(
    #+begin_src emacs-lisp
    (add-hook 'before-save-hook 'delete-trailing-whitespace)
    #+end_src

    Also, sometimes you simply want to explicitly highlight all the whitespace in the buffer. For that emacs offers a ~whitespace-mode~ that I like to bind to F10.
    #+begin_src emacs-lisp
    (global-set-key (kbd "<f10>") 'whitespace-mode)
    #+end_src

*** IDO

    There are several interactive completion solution in emacs. I am used to ~ido~.
    #+begin_src emacs-lisp
    (use-package flx-ido
      :ensure t
      :config
      (setq ido-auto-merge-work-directories-length -1)
      :init
      (ido-mode)
      (flx-ido-mode 1)
      (ido-everywhere))
    #+end_src

*** Window management

    The default keybindings for the window management are unnecessarily verbose. I am used to the following shortcuts
    #+begin_src emacs-lisp
    (global-set-key (kbd "M-1") 'delete-other-windows)
    (global-set-key (kbd "M-2") 'split-window-vertically)
    (global-set-key (kbd "M-3") 'split-window-horizontally)
    (global-set-key (kbd "M-0") 'delete-window)

    (define-key global-map (kbd "M-o") nil)
    (global-set-key (kbd "M-o") 'other-window)
    (global-set-key (kbd "C-M-o") (lambda () (interactive) (other-window -1)))
    #+end_src

* Programming

*** GIT

    I am a software developer and I use ~git~ a lot. Thankfully, emacs has an incredibly powerful frontend for ~git~ called ~magit~. Since the defaults make sense the whole package setup is very short
    #+begin_src emacs-lisp
    (use-package magit
      :ensure t
      :bind ("C-c g" . magit-status))
    #+end_src
