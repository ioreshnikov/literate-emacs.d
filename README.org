#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+title: My emacs configuration
#+date: <2020-06-11 Чт>
#+author: Ivan Oreshnikov
#+email: oreshnikov.ivan@gmail.com
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 27.0.91 (Org mode 9.3)

Hi! My name is
#+begin_src emacs-lisp
(setq user-full-name "Ivan Oreshnikov"
      user-mail-address "oreshnikov.ivan@gmail.com")
#+end_src
I have been using emacs for the past 10 years and this is my first attempt at writing a literate config.

* Bootstrapping

*** Setting up melpa and quelpa

    This configuration heavily relies on ~melpa~ repository.
    #+begin_src emacs-lisp
    (require 'package)

    (add-to-list
      'package-archives
      '("melpa" . "https://melpa.org/packages/"))
    (package-initialize)

    (when (not package-archive-contents)
      (package-refresh-contents))
    #+end_src
    ~quelpa~ is necessary only to set up ~all-the-icons~ package, but it's a good idea to keep all the package setup in this section.
    #+begin_src emacs-lisp
    (when (not (package-installed-p 'quelpa))
      (package-install 'quelpa))

    (require 'quelpa)
    (quelpa '(quelpa-use-package :fetcher github :repo "quelpa/quelpa-use-package"))

    (require 'quelpa-use-package)
    #+end_src

* General settings

*** Backup

    I don't think I've ever used an automatically created backup. I hate seeing all those tilda-files though.
    #+begin_src emacs-lisp
    (setq backup-inhibited t)
    #+end_src

*** Auto-save

    Again, don't find this feature useful.
    #+begin_src emacs-lisp
    (setq auto-save-default nil)
    #+end_src

*** Subword mode

    This one is seriously cool. This mode allows you to treat the separate words in a CamelCase and snake_case notation as words. You can navigate inside a single token from a word to word, jump back and forward, delete the individual words, swap them around, you name it.
    #+begin_src emacs-lisp
    (global-subword-mode)
    #+end_src

*** Auto-revert mode

    When a file changes on disk I don't want ~emacs~ to ask me what to do. I just want to automatically update the buffer. I can always do an undo if I don't like the new content.
    #+begin_src emacs-lisp
    (global-auto-revert-mode 1)
    #+end_src

*** Unique buffer names

    By default when you open multiple files with the same name ~emacs~ adds a numeric postfix to the buffer name. I prefer a readable-directory-based-prefix-notation and this is how you enable it in
    #+begin_src emacs-lisp
    (require 'uniquify)
    (setq uniquify-buffer-name-style 'forward)
    #+end_src

*** Yes or no prompts

    Whenever ~emacs~ wants a simple answer it requires you to type ~yes~ or ~no~ in the prompt. Yes, type and then press Enter. I have no idea why this is still a default, when there is an already builtin option to accept keypresses ~y~ and ~n~ as an answer.
    #+begin_src emacs-lisp
    (defalias 'yes-or-no-p 'y-or-n-p)
    #+end_src

*** Whitespace

    Automatically delete all the traling whitespace when saving the file. This is a neat feature that I think everyone should set up in their editor, but unfortunately very few people do :(
    #+begin_src emacs-lisp
    (add-hook 'before-save-hook 'delete-trailing-whitespace)
    #+end_src

    Also, sometimes you simply want to explicitly highlight all the whitespace in the buffer. For that emacs offers a ~whitespace-mode~ that I like to bind to F10.
    #+begin_src emacs-lisp
    (global-set-key (kbd "<f10>") 'whitespace-mode)
    #+end_src

*** Indentation

    Always expand tabs to 4 spaces.
    #+begin_src emacs-lisp
    (setq-default indent-tabs-mode nil)
    (setq-default tab-width 4)
    #+end_src

*** Paste the text where the cursor is

    On linux one can paste from the clipboard by pressing a mouse wheel. I use this all the time, but by default ~emacs~ pastes the text where the mouse is and not where the text cursor is. This fixes it
    #+begin_src emacs-lisp
    (setq mouse-yank-at-point t)
    #+end_src

*** Join next line

    A really handy shortcut that automatically joins the next line to the current one removing any whitespace in between.
    #+begin_src emacs-lisp
    (global-set-key (kbd "M-j") (lambda () (interactive) (join-line -1)))
    #+end_src

*** IDO

    There are several interactive completion solution in emacs. I am used to ~ido~.
    #+begin_src emacs-lisp
    (use-package flx-ido
      :ensure t
      :config
      (setq ido-auto-merge-work-directories-length -1)
      :init
      (ido-mode)
      (flx-ido-mode 1)
      (ido-everywhere))
    #+end_src

*** Window management

    The default keybindings for the window management are unnecessarily verbose. I am used to the following shortcuts
    #+begin_src emacs-lisp
    (global-set-key (kbd "M-1") 'delete-other-windows)
    (global-set-key (kbd "M-2") 'split-window-vertically)
    (global-set-key (kbd "M-3") 'split-window-horizontally)
    (global-set-key (kbd "M-0") 'delete-window)

    (define-key global-map (kbd "M-o") nil)
    (global-set-key (kbd "M-o") 'other-window)
    (global-set-key (kbd "C-M-o") (lambda () (interactive) (other-window -1)))
    #+end_src

    Sometimes I mess up my window configuration -- close a frame I need, for example. Thankfully there is a builtin package that provides undo-redo functionality for windows.
    #+begin_src emacs-lisp
    (winner-mode)
    #+end_src

* UI

  Let's say it: ~emacs~ is ugly. The redisplay engine is old and clunky, every attempt to introduce a widget in a buffer looks like it's 1995 and the fonts and the colors are all over the place. In this section we are desperately trying to make it look if not pretty then at least tidy.

*** Cleaning up

    We start by disabling most of the default UI features. First goes the startup message, I just want a scratch buffer when I start my editor.
    #+begin_src emacs-lisp
    (setq inhibit-startup-message t)
    #+end_src
    Then the sound. I hate those blips that emacs does when you press ~C-g~ or get an error.
    #+begin_src emacs-lisp
    (setq ring-bell-function 'ignore)
    #+end_src
    I also really dislike the suddenly popping out windows. This is an ongoing battle, but one thing that is easy to fix is the minibuffer size.
    #+begin_src emacs-lisp
    (setq resize-mini-windows nil)
    #+end_src
    Dialog windows are also annoying. This one is easy to disable.
    #+begin_src emacs-lisp
    (setq use-dialog-box nil)
    #+end_src
    And finally we completely disable the menu- the tool- and the scrollbars.
    #+begin_src emacs-lisp
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    #+end_src

*** Performance tweaks

    I don't actually fully understand those settings. But when the last time I had some performance problems related to the redisplay engine they seemed to help
    #+begin_src emacs-lisp
    (setq auto-window-vscroll nil)
    (setq-default bidi-paragraph-direction nil)
    (setq fast-but-imprecise-scrolling t)
    (setq redisplay-dont-pause t)
    #+end_src

*** Window title

    I don't see the point of the default window title. At least we can put something meaningful (not useful, but meaningful) out there
    #+begin_src emacs-lisp
    (setq frame-title-format
          '(buffer-file-name "%f" ("%b")))
    #+end_src

*** Fonts

    For technical reasons I am splitting the fonts between families and sizes; this occasionaly proves to be useful.
    #+begin_src emacs-lisp
    (defvar monospace-font-family "Fira Mono")
    (defvar serif-font-family "CMU Serif")
    (defvar sans-serif-font-familhy "Fira Sans")
    (defvar font-size 12)

    (add-to-list 'default-frame-alist `(font . ,(format "%s %d" monospace-font-family font-size)))
    #+end_src

    By default there is not enough space between the lines and it puts strain on my eyes. This adds a bit of air to the buffer
    #+begin_src emacs-lisp
    (setq-default line-spacing 0.1)
    #+end_src

*** Current line

    I prefer my current line to be highlighted. Makes youre life easier on 32" display.
    #+begin_src emacs-lisp
    (global-hl-line-mode)
    #+end_src

* Programming

*** GIT

    I am a software developer and I use ~git~ a lot. Thankfully, emacs has an incredibly powerful frontend for ~git~ called ~magit~. Since the defaults make sense the whole package setup is very short
    #+begin_src emacs-lisp
    (use-package magit
      :ensure t
      :bind ("C-c g" . magit-status))
    #+end_src
